import json

# ✅ 태그 키워드 대폭 확장
# 각 카테고리별로 관련 키워드 최대한 많이 추가

# 참고 기준: 관광지 이름(title), 개요(overview) 등에 흔히 등장하는 단어

tag_dict = {
    "힐링": [
        "공원", "자연", "산책", "숲", "휴양림", "계곡", "호수", "정원", "명상", "온천",
        "힐링", "쉼터", "치유", "휴식", "정적", "풍경", "호젓한", "한적한", "수목원",
        "드라이브", "산림욕", "생태공원", "녹지", "휴게소", "호반"
    ],
    "문화": [
        "박물관", "미술관", "전시관", "문화", "전시", "공연", "예술", "연극", "뮤지컬",
        "무용", "오페라", "전통공예", "갤러리", "아트", "창작", "문화센터", "민속", "문예회관",
        "문화유산", "아트센터", "문화행사"
    ],
    "맛집": [
        "음식", "맛집", "식당", "카페", "분식", "요리", "한식", "양식", "중식", "일식",
        "퓨전", "디저트", "빵집", "제과", "술집", "주점", "포장마차", "고기", "족발", "치킨",
        "곱창", "탕", "찌개", "국밥", "삼겹살", "회", "해산물", "맛있는", "먹거리"
    ],
    "액티비티": [
        "스포츠", "레포츠", "체험", "놀이", "수상", "등산", "캠핑", "승마", "스키", "서핑",
        "클라이밍", "짚라인", "래프팅", "패러글라이딩", "낚시", "수영", "아쿠아리움",
        "스파", "온천", "모터스포츠", "카트", "테마파크", "워터파크", "서바이벌"
    ],
    "역사": [
        "유적지", "사적", "고궁", "왕릉", "성곽", "역사", "사찰", "절", "불교", "문화재",
        "전통", "향교", "유교", "고분", "고대", "조선", "삼국", "고려", "일제", "독립운동",
        "역사관", "유물"
    ],
    "자연": [
        "해변", "바다", "산", "계곡", "강", "호수", "폭포", "자연", "섬", "초원",
        "해안", "숲길", "등산로", "수목원", "하천", "생태", "자연경관", "암벽", "사막"
    ],
    "가족": [
        "어린이", "키즈", "가족", "체험학습", "가족여행", "유아", "아이", "놀이공원",
        "키즈카페", "교육", "가족단위", "주말나들이", "동물농장", "동물원", "과학관"
    ],
    "사진명소": [
        "포토", "인생샷", "사진", "풍경", "전망대", "야경", "출사지", "뷰포인트", "전경",
        "사진찍기좋은", "SNS", "포토존", "촬영지", "핫플", "비주얼", "스팟", "감성사진"
    ],
    "쇼핑": [
        "쇼핑몰", "아울렛", "시장", "전통시장", "백화점", "쇼핑", "특산물", "기념품",
        "플리마켓", "쇼핑거리", "면세점"
    ],
    "도심": [
        "도심", "시내", "중심가", "거리", "광장", "도시", "고층", "야경", "현대건물",
        "스카이라인", "빌딩숲"
    ],
    "이색": [
        "이색", "특이한", "비밀스런", "숨겨진", "색다른", "독특한", "레트로", "복고",
        "한옥마을", "예술촌", "벽화마을", "감성", "빈티지", "예쁜"
    ]
}

# ✅ 태그 부여 함수
def assign_tags(content_title, overview):
    combined_text = f"{content_title or ''} {overview or ''}".lower()
    assigned = []
    for tag, keywords in tag_dict.items():
        if any(keyword in combined_text for keyword in keywords):
            assigned.append(tag)
    return assigned

# ✅ JSON 파일 로드
with open("tour_contents.json", "r", encoding="utf-8") as f:
    content_list = json.load(f)

# ✅ 태그 부여
no_tag_count = 0
for item in content_list:
    title = item.get("title", "")
    overview = item.get("overview", "")
    tags = assign_tags(title, overview)
    item["tags"] = tags
    if not tags:
        no_tag_count += 1

# ✅ 결과 저장
with open("tagged_contents.json", "w", encoding="utf-8") as f:
    json.dump(content_list, f, ensure_ascii=False, indent=2)

print(f"✅ 총 {len(content_list)}개의 콘텐츠에 태그를 부여했습니다.")
print(f"⚠️ 태그가 없는 콘텐츠 수: {no_tag_count}개")
print("📁 파일 저장: tagged_contents.json")
